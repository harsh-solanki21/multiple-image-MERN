[{"D:\\Projects\\multiple-image\\client\\src\\index.js":"1","D:\\Projects\\multiple-image\\client\\src\\reportWebVitals.js":"2","D:\\Projects\\multiple-image\\client\\src\\App.js":"3","D:\\Projects\\multiple-image\\client\\src\\screens\\FileUploadScreen.js":"4","D:\\Projects\\multiple-image\\client\\src\\data\\api.js":"5"},{"size":500,"mtime":1638374526500,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1638374526552,"results":"8","hashOfConfig":"7"},{"size":2942,"mtime":1638381040397,"results":"9","hashOfConfig":"7"},{"size":4620,"mtime":1638378881626,"results":"10","hashOfConfig":"7"},{"size":767,"mtime":1638378876355,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"vakjzi",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\multiple-image\\client\\src\\index.js",[],["25","26"],"D:\\Projects\\multiple-image\\client\\src\\reportWebVitals.js",[],"D:\\Projects\\multiple-image\\client\\src\\App.js",["27"],"import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport FileUploadScreen from './screens/FileUploadScreen'\nimport { getSingleFiles, getMultipleFiles } from './data/api'\n\nfunction App() {\n  const [singleFiles, setSingleFiles] = useState([])\n  const [multipleFiles, setMultipleFiles] = useState([])\n\n  const getSingleFileslist = async () => {\n    try {\n      const fileslist = await getSingleFiles()\n      setSingleFiles(fileslist)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  const getMultipleFilesList = async () => {\n    try {\n      const fileslist = await getMultipleFiles()\n      setMultipleFiles(fileslist)\n      console.log(multipleFiles)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  useEffect(() => {\n    getSingleFileslist()\n    getMultipleFilesList()\n  }, [])\n  return (\n    <>\n      <div className='container'>\n        <h3 className='text-danger font-weight-bolder border-bottom text-center'>\n          Single & Multiple File Upload Using MERN Stack{' '}\n        </h3>\n        <FileUploadScreen\n          getsingle={() => getSingleFileslist()}\n          getMultiple={() => getMultipleFilesList()}\n        />\n      </div>\n      <div className='container-fluid mt-5'>\n        <div className='row'>\n          <div className='col-6'>\n            <h4 className='text-success font-weight-bold'>Single Files List</h4>\n            <div className='row'>\n              {singleFiles.map((file, index) => (\n                <div className='col-6'>\n                  <div className='card mb-2 border-0 p-0'>\n                    <img\n                      src={`http://localhost:5000/${file.filePath}`}\n                      height='200'\n                      className='card-img-top img-responsive'\n                      alt='img'\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className='col-6'>\n            <h4 className='text-success font-weight-bold'>\n              Multiple Files List\n            </h4>\n            {multipleFiles.map((element, index) => (\n              <div key={element._id}>\n                <h6 className='text-danger font-weight-bold'>\n                  {element.title}\n                </h6>\n                <div className='row'>\n                  {element.files.map((file, index) => (\n                    <div className='col-6'>\n                      <div className='card mb-2 border-0 p-0'>\n                        <img\n                          src={`http://localhost:5000/${file.filePath}`}\n                          height='200'\n                          className='card-img-top img-responsive'\n                          alt='img'\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","D:\\Projects\\multiple-image\\client\\src\\screens\\FileUploadScreen.js",["28"],"import React, { useState, useEffect } from 'react'\nimport { singleFileUpload, multipleFilesUpload } from '../data/api'\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar'\nimport 'react-circular-progressbar/dist/styles.css'\n\nconst FileUploadScreen = (props) => {\n  const [singleFile, setSingleFile] = useState('')\n  const [multipleFiles, setMultipleFiles] = useState('')\n  const [title, setTitle] = useState('')\n  const [singleProgress, setSingleProgress] = useState(0)\n  const [multipleProgress, setMultipleProgress] = useState(0)\n\n  const SingleFileChange = (e) => {\n    setSingleFile(e.target.files[0])\n    setSingleProgress(0)\n  }\n  const MultipleFileChange = (e) => {\n    setMultipleFiles(e.target.files)\n    setMultipleProgress(0)\n  }\n  const singleFileOptions = {\n    onUploadProgress: (progressEvent) => {\n      const { loaded, total } = progressEvent\n      const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000))\n      setSingleProgress(percentage)\n    },\n  }\n  const mulitpleFileOptions = {\n    onUploadProgress: (progressEvent) => {\n      const { loaded, total } = progressEvent\n      const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000))\n      setMultipleProgress(percentage)\n    },\n  }\n  const uploadSingleFile = async () => {\n    const formData = new FormData()\n    formData.append('file', singleFile)\n    await singleFileUpload(formData, singleFileOptions)\n    props.getsingle()\n  }\n  const UploadMultipleFiles = async () => {\n    const formData = new FormData()\n    formData.append('title', title)\n    for (let i = 0; i < multipleFiles.length; i++) {\n      formData.append('files', multipleFiles[i])\n    }\n    await multipleFilesUpload(formData, mulitpleFileOptions)\n    props.getMultiple()\n  }\n  return (\n    <div className='row mt-3'>\n      <div className='col-6'>\n        <div className='form-group'>\n          <label>Select Single File</label>\n          <input\n            type='file'\n            className='form-control'\n            onChange={(e) => SingleFileChange(e)}\n          />\n        </div>\n        <div className='row'>\n          <div className='col-10'>\n            <button\n              type='button'\n              className='btn btn-danger'\n              onClick={() => uploadSingleFile()}\n            >\n              Upload\n            </button>\n          </div>\n          <div className='col-2'>\n            <CircularProgressbar\n              value={singleProgress}\n              text={`${singleProgress}%`}\n              styles={buildStyles({\n                rotation: 0.25,\n                strokeLinecap: 'butt',\n                textSize: '16px',\n                pathTransitionDuration: 0.5,\n                pathColor: `rgba(255, 136, 136, ${singleProgress / 100})`,\n                textColor: '#f88',\n                trailColor: '#d6d6d6',\n                backgroundColor: '#3e98c7',\n              })}\n            />\n          </div>\n        </div>\n      </div>\n      <div className='col-6'>\n        <div className='row'>\n          <div className='col-6'>\n            <label>Title</label>\n            <input\n              type='text'\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder='enter title for your gallery'\n              className='form-control'\n            />\n          </div>\n          <div className='col-6'>\n            <div className='form-group'>\n              <label>Select Multiple Files</label>\n              <input\n                type='file'\n                onChange={(e) => MultipleFileChange(e)}\n                className='form-control'\n                multiple\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-10'>\n            <button\n              type='button'\n              onClick={() => UploadMultipleFiles()}\n              className='btn btn-danger'\n            >\n              Upload\n            </button>\n          </div>\n          <div className='col-2'>\n            <CircularProgressbar\n              value={multipleProgress}\n              text={`${multipleProgress}%`}\n              styles={buildStyles({\n                rotation: 0.25,\n                strokeLinecap: 'butt',\n                textSize: '16px',\n                pathTransitionDuration: 0.5,\n                pathColor: `rgba(255, 136, 136, ${multipleProgress / 100})`,\n                textColor: '#f88',\n                trailColor: '#d6d6d6',\n                backgroundColor: '#3e98c7',\n              })}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default FileUploadScreen\n","D:\\Projects\\multiple-image\\client\\src\\data\\api.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":30,"column":6,"nodeType":"35","endLine":30,"endColumn":8,"suggestions":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":36},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMultipleFilesList'. Either include it or remove the dependency array.","ArrayExpression",["43"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},"Update the dependencies array to be: [getMultipleFilesList]",{"range":"46","text":"47"},[813,815],"[getMultipleFilesList]"]